<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="menuStrip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAIAEBAAAAAACABoBQAAJgAAACAgAAAAAAgAqAgAAI4FAAAoAAAAEAAAACAAAAABAAgAAAAAAEAB
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///wBDhqoAv62qAFBLQgCHfmwAdqTJANnZ1QAcJzgASWp6AJeX
        lwAvRmIAboWlAGtaXACUu9EAQy8rAMDCxQAtZogAe4SJAFhykgBAbJ8AIDdQAFaQuwCtpZgAcnF0AJaG
        hAArJSQAPDw/AKmwtABGVm0AeJO1AEJHUwCFeFcAVTkyAIimvgBaVlAAc21gAKCXggDMu7cA9PT0AAsL
        CwDLzdAALzAzAFtmdgBihLQAoqSlAEt4pACBa2kAPU9hAJiMdQBgnL8AHCAkAIiBgABidocAZ2hoAGWS
        tgBUhrEAQ2eSAE5PUQBfX2EAe3p5AKSQjQArPlMAcZq+AGaAnACsrKgARkNBALO1uQComZQAycjAALKj
        owCMk5cAuretALy8vAAzKioAUHWZAJGOgABiUE4Al4yMAJ+bkQCmopIAOVZlAFdQRABNNjAAg313AKye
        nQBsk7sAnJKSAFpNTQBcW1oAGS09AMnJyQCbnJwAOm+bAEtKTAB6fYAAuK2tACwsLABsbGwApZ+fAIqG
        hQA9QEUAaGNjALqppwBKRkYAgYCAAJyMiABDPz4AqKioACYjIwBCUF8AkYeCACI3VQBVTUgAUVNTAJ+U
        lgCBdloAfn58AL+/vwBDQkUAs6ijAGtpZQCaiYUAbmlpAIWDgwDPz88AVY63AJqYlACWi4gAZGRkAJqZ
        mQCZlJQArKysAJuMjADX1tQAw8PDACE0TgCvoJ4An5GQAF+CtACmpqYAX1xbAD05PwBpaWoAgoKCAGdm
        ZgCkpKQAmImEAHl5eQDBw8QAqampAGZlZQA9PT8ATk9QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
</value>
  </data>
</root>